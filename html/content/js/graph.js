/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 9722.0, "series": [{"data": [[0.0, 18.0], [0.1, 26.0], [0.2, 29.0], [0.3, 31.0], [0.4, 33.0], [0.5, 34.0], [0.6, 36.0], [0.7, 38.0], [0.8, 39.0], [0.9, 40.0], [1.0, 41.0], [1.1, 43.0], [1.2, 44.0], [1.3, 45.0], [1.4, 46.0], [1.5, 48.0], [1.6, 49.0], [1.7, 50.0], [1.8, 51.0], [1.9, 52.0], [2.0, 53.0], [2.1, 54.0], [2.2, 55.0], [2.3, 56.0], [2.4, 58.0], [2.5, 59.0], [2.6, 60.0], [2.7, 61.0], [2.8, 62.0], [2.9, 63.0], [3.0, 64.0], [3.1, 65.0], [3.2, 66.0], [3.3, 67.0], [3.4, 69.0], [3.5, 70.0], [3.6, 71.0], [3.7, 72.0], [3.8, 73.0], [3.9, 74.0], [4.0, 75.0], [4.1, 76.0], [4.2, 78.0], [4.3, 79.0], [4.4, 80.0], [4.5, 81.0], [4.6, 82.0], [4.7, 83.0], [4.8, 84.0], [4.9, 85.0], [5.0, 86.0], [5.1, 87.0], [5.2, 88.0], [5.3, 89.0], [5.4, 90.0], [5.5, 91.0], [5.6, 92.0], [5.7, 93.0], [5.8, 94.0], [5.9, 95.0], [6.0, 96.0], [6.1, 97.0], [6.2, 98.0], [6.3, 99.0], [6.4, 100.0], [6.5, 101.0], [6.6, 102.0], [6.7, 102.0], [6.8, 103.0], [6.9, 105.0], [7.0, 106.0], [7.1, 106.0], [7.2, 107.0], [7.3, 108.0], [7.4, 109.0], [7.5, 110.0], [7.6, 111.0], [7.7, 112.0], [7.8, 113.0], [7.9, 114.0], [8.0, 115.0], [8.1, 116.0], [8.2, 117.0], [8.3, 118.0], [8.4, 119.0], [8.5, 120.0], [8.6, 120.0], [8.7, 121.0], [8.8, 122.0], [8.9, 123.0], [9.0, 124.0], [9.1, 125.0], [9.2, 125.0], [9.3, 126.0], [9.4, 127.0], [9.5, 128.0], [9.6, 129.0], [9.7, 130.0], [9.8, 131.0], [9.9, 132.0], [10.0, 133.0], [10.1, 133.0], [10.2, 134.0], [10.3, 135.0], [10.4, 136.0], [10.5, 136.0], [10.6, 137.0], [10.7, 138.0], [10.8, 139.0], [10.9, 140.0], [11.0, 141.0], [11.1, 142.0], [11.2, 143.0], [11.3, 144.0], [11.4, 144.0], [11.5, 145.0], [11.6, 146.0], [11.7, 147.0], [11.8, 148.0], [11.9, 149.0], [12.0, 149.0], [12.1, 150.0], [12.2, 151.0], [12.3, 152.0], [12.4, 153.0], [12.5, 153.0], [12.6, 154.0], [12.7, 155.0], [12.8, 156.0], [12.9, 157.0], [13.0, 157.0], [13.1, 158.0], [13.2, 159.0], [13.3, 160.0], [13.4, 161.0], [13.5, 162.0], [13.6, 163.0], [13.7, 163.0], [13.8, 164.0], [13.9, 165.0], [14.0, 166.0], [14.1, 168.0], [14.2, 169.0], [14.3, 169.0], [14.4, 171.0], [14.5, 172.0], [14.6, 173.0], [14.7, 174.0], [14.8, 174.0], [14.9, 175.0], [15.0, 177.0], [15.1, 177.0], [15.2, 178.0], [15.3, 179.0], [15.4, 180.0], [15.5, 181.0], [15.6, 182.0], [15.7, 183.0], [15.8, 184.0], [15.9, 186.0], [16.0, 187.0], [16.1, 188.0], [16.2, 189.0], [16.3, 190.0], [16.4, 191.0], [16.5, 193.0], [16.6, 194.0], [16.7, 195.0], [16.8, 196.0], [16.9, 198.0], [17.0, 199.0], [17.1, 200.0], [17.2, 201.0], [17.3, 203.0], [17.4, 204.0], [17.5, 205.0], [17.6, 206.0], [17.7, 208.0], [17.8, 210.0], [17.9, 211.0], [18.0, 213.0], [18.1, 215.0], [18.2, 216.0], [18.3, 218.0], [18.4, 219.0], [18.5, 221.0], [18.6, 222.0], [18.7, 224.0], [18.8, 226.0], [18.9, 227.0], [19.0, 229.0], [19.1, 230.0], [19.2, 232.0], [19.3, 234.0], [19.4, 236.0], [19.5, 237.0], [19.6, 238.0], [19.7, 240.0], [19.8, 241.0], [19.9, 243.0], [20.0, 245.0], [20.1, 246.0], [20.2, 248.0], [20.3, 249.0], [20.4, 250.0], [20.5, 252.0], [20.6, 254.0], [20.7, 255.0], [20.8, 257.0], [20.9, 258.0], [21.0, 260.0], [21.1, 261.0], [21.2, 262.0], [21.3, 264.0], [21.4, 265.0], [21.5, 266.0], [21.6, 267.0], [21.7, 268.0], [21.8, 269.0], [21.9, 270.0], [22.0, 272.0], [22.1, 273.0], [22.2, 274.0], [22.3, 275.0], [22.4, 276.0], [22.5, 277.0], [22.6, 278.0], [22.7, 279.0], [22.8, 280.0], [22.9, 281.0], [23.0, 283.0], [23.1, 283.0], [23.2, 284.0], [23.3, 285.0], [23.4, 286.0], [23.5, 287.0], [23.6, 288.0], [23.7, 289.0], [23.8, 289.0], [23.9, 290.0], [24.0, 291.0], [24.1, 291.0], [24.2, 292.0], [24.3, 293.0], [24.4, 293.0], [24.5, 294.0], [24.6, 295.0], [24.7, 296.0], [24.8, 296.0], [24.9, 297.0], [25.0, 297.0], [25.1, 298.0], [25.2, 299.0], [25.3, 300.0], [25.4, 300.0], [25.5, 301.0], [25.6, 302.0], [25.7, 302.0], [25.8, 303.0], [25.9, 304.0], [26.0, 304.0], [26.1, 305.0], [26.2, 305.0], [26.3, 306.0], [26.4, 307.0], [26.5, 307.0], [26.6, 308.0], [26.7, 309.0], [26.8, 309.0], [26.9, 310.0], [27.0, 310.0], [27.1, 311.0], [27.2, 312.0], [27.3, 312.0], [27.4, 313.0], [27.5, 313.0], [27.6, 314.0], [27.7, 314.0], [27.8, 315.0], [27.9, 316.0], [28.0, 316.0], [28.1, 317.0], [28.2, 317.0], [28.3, 318.0], [28.4, 318.0], [28.5, 319.0], [28.6, 319.0], [28.7, 320.0], [28.8, 320.0], [28.9, 321.0], [29.0, 321.0], [29.1, 322.0], [29.2, 322.0], [29.3, 323.0], [29.4, 323.0], [29.5, 324.0], [29.6, 324.0], [29.7, 324.0], [29.8, 325.0], [29.9, 325.0], [30.0, 326.0], [30.1, 326.0], [30.2, 327.0], [30.3, 328.0], [30.4, 328.0], [30.5, 329.0], [30.6, 329.0], [30.7, 330.0], [30.8, 330.0], [30.9, 331.0], [31.0, 331.0], [31.1, 332.0], [31.2, 332.0], [31.3, 333.0], [31.4, 333.0], [31.5, 334.0], [31.6, 334.0], [31.7, 334.0], [31.8, 335.0], [31.9, 335.0], [32.0, 336.0], [32.1, 336.0], [32.2, 337.0], [32.3, 337.0], [32.4, 338.0], [32.5, 338.0], [32.6, 339.0], [32.7, 339.0], [32.8, 340.0], [32.9, 340.0], [33.0, 341.0], [33.1, 341.0], [33.2, 342.0], [33.3, 342.0], [33.4, 342.0], [33.5, 343.0], [33.6, 343.0], [33.7, 344.0], [33.8, 344.0], [33.9, 345.0], [34.0, 345.0], [34.1, 346.0], [34.2, 346.0], [34.3, 347.0], [34.4, 347.0], [34.5, 347.0], [34.6, 348.0], [34.7, 348.0], [34.8, 349.0], [34.9, 349.0], [35.0, 349.0], [35.1, 350.0], [35.2, 350.0], [35.3, 350.0], [35.4, 351.0], [35.5, 351.0], [35.6, 352.0], [35.7, 352.0], [35.8, 353.0], [35.9, 353.0], [36.0, 353.0], [36.1, 354.0], [36.2, 354.0], [36.3, 355.0], [36.4, 355.0], [36.5, 355.0], [36.6, 356.0], [36.7, 356.0], [36.8, 357.0], [36.9, 357.0], [37.0, 358.0], [37.1, 358.0], [37.2, 358.0], [37.3, 359.0], [37.4, 359.0], [37.5, 360.0], [37.6, 360.0], [37.7, 360.0], [37.8, 361.0], [37.9, 361.0], [38.0, 362.0], [38.1, 362.0], [38.2, 362.0], [38.3, 363.0], [38.4, 363.0], [38.5, 363.0], [38.6, 364.0], [38.7, 364.0], [38.8, 364.0], [38.9, 365.0], [39.0, 365.0], [39.1, 365.0], [39.2, 366.0], [39.3, 366.0], [39.4, 367.0], [39.5, 367.0], [39.6, 367.0], [39.7, 368.0], [39.8, 368.0], [39.9, 368.0], [40.0, 369.0], [40.1, 369.0], [40.2, 370.0], [40.3, 370.0], [40.4, 370.0], [40.5, 371.0], [40.6, 371.0], [40.7, 371.0], [40.8, 372.0], [40.9, 372.0], [41.0, 372.0], [41.1, 373.0], [41.2, 373.0], [41.3, 373.0], [41.4, 374.0], [41.5, 374.0], [41.6, 375.0], [41.7, 375.0], [41.8, 375.0], [41.9, 376.0], [42.0, 376.0], [42.1, 376.0], [42.2, 377.0], [42.3, 377.0], [42.4, 377.0], [42.5, 378.0], [42.6, 378.0], [42.7, 378.0], [42.8, 379.0], [42.9, 379.0], [43.0, 379.0], [43.1, 380.0], [43.2, 380.0], [43.3, 381.0], [43.4, 381.0], [43.5, 382.0], [43.6, 382.0], [43.7, 382.0], [43.8, 382.0], [43.9, 383.0], [44.0, 383.0], [44.1, 383.0], [44.2, 384.0], [44.3, 384.0], [44.4, 384.0], [44.5, 385.0], [44.6, 385.0], [44.7, 385.0], [44.8, 385.0], [44.9, 386.0], [45.0, 386.0], [45.1, 386.0], [45.2, 387.0], [45.3, 387.0], [45.4, 387.0], [45.5, 387.0], [45.6, 388.0], [45.7, 388.0], [45.8, 388.0], [45.9, 389.0], [46.0, 389.0], [46.1, 389.0], [46.2, 390.0], [46.3, 390.0], [46.4, 390.0], [46.5, 391.0], [46.6, 391.0], [46.7, 391.0], [46.8, 391.0], [46.9, 392.0], [47.0, 392.0], [47.1, 392.0], [47.2, 393.0], [47.3, 393.0], [47.4, 393.0], [47.5, 393.0], [47.6, 394.0], [47.7, 394.0], [47.8, 394.0], [47.9, 395.0], [48.0, 395.0], [48.1, 395.0], [48.2, 395.0], [48.3, 396.0], [48.4, 396.0], [48.5, 396.0], [48.6, 397.0], [48.7, 397.0], [48.8, 397.0], [48.9, 397.0], [49.0, 398.0], [49.1, 398.0], [49.2, 398.0], [49.3, 399.0], [49.4, 399.0], [49.5, 399.0], [49.6, 399.0], [49.7, 400.0], [49.8, 400.0], [49.9, 400.0], [50.0, 401.0], [50.1, 401.0], [50.2, 401.0], [50.3, 401.0], [50.4, 401.0], [50.5, 402.0], [50.6, 402.0], [50.7, 402.0], [50.8, 403.0], [50.9, 403.0], [51.0, 403.0], [51.1, 403.0], [51.2, 404.0], [51.3, 404.0], [51.4, 404.0], [51.5, 404.0], [51.6, 405.0], [51.7, 405.0], [51.8, 405.0], [51.9, 405.0], [52.0, 406.0], [52.1, 406.0], [52.2, 406.0], [52.3, 406.0], [52.4, 407.0], [52.5, 407.0], [52.6, 407.0], [52.7, 407.0], [52.8, 408.0], [52.9, 408.0], [53.0, 408.0], [53.1, 408.0], [53.2, 409.0], [53.3, 409.0], [53.4, 409.0], [53.5, 409.0], [53.6, 410.0], [53.7, 410.0], [53.8, 410.0], [53.9, 410.0], [54.0, 411.0], [54.1, 411.0], [54.2, 411.0], [54.3, 411.0], [54.4, 412.0], [54.5, 412.0], [54.6, 412.0], [54.7, 412.0], [54.8, 413.0], [54.9, 413.0], [55.0, 413.0], [55.1, 414.0], [55.2, 414.0], [55.3, 414.0], [55.4, 414.0], [55.5, 415.0], [55.6, 415.0], [55.7, 415.0], [55.8, 415.0], [55.9, 415.0], [56.0, 416.0], [56.1, 416.0], [56.2, 416.0], [56.3, 417.0], [56.4, 417.0], [56.5, 417.0], [56.6, 417.0], [56.7, 418.0], [56.8, 418.0], [56.9, 418.0], [57.0, 419.0], [57.1, 419.0], [57.2, 419.0], [57.3, 419.0], [57.4, 420.0], [57.5, 420.0], [57.6, 420.0], [57.7, 420.0], [57.8, 421.0], [57.9, 421.0], [58.0, 421.0], [58.1, 422.0], [58.2, 422.0], [58.3, 422.0], [58.4, 422.0], [58.5, 423.0], [58.6, 423.0], [58.7, 423.0], [58.8, 423.0], [58.9, 424.0], [59.0, 424.0], [59.1, 424.0], [59.2, 424.0], [59.3, 425.0], [59.4, 425.0], [59.5, 425.0], [59.6, 426.0], [59.7, 426.0], [59.8, 426.0], [59.9, 426.0], [60.0, 427.0], [60.1, 427.0], [60.2, 427.0], [60.3, 428.0], [60.4, 428.0], [60.5, 428.0], [60.6, 428.0], [60.7, 429.0], [60.8, 429.0], [60.9, 429.0], [61.0, 430.0], [61.1, 430.0], [61.2, 430.0], [61.3, 431.0], [61.4, 431.0], [61.5, 431.0], [61.6, 432.0], [61.7, 432.0], [61.8, 432.0], [61.9, 433.0], [62.0, 433.0], [62.1, 433.0], [62.2, 434.0], [62.3, 434.0], [62.4, 434.0], [62.5, 434.0], [62.6, 435.0], [62.7, 435.0], [62.8, 436.0], [62.9, 436.0], [63.0, 436.0], [63.1, 437.0], [63.2, 437.0], [63.3, 437.0], [63.4, 438.0], [63.5, 438.0], [63.6, 438.0], [63.7, 439.0], [63.8, 439.0], [63.9, 439.0], [64.0, 440.0], [64.1, 440.0], [64.2, 441.0], [64.3, 441.0], [64.4, 441.0], [64.5, 442.0], [64.6, 442.0], [64.7, 442.0], [64.8, 443.0], [64.9, 443.0], [65.0, 443.0], [65.1, 444.0], [65.2, 444.0], [65.3, 444.0], [65.4, 445.0], [65.5, 445.0], [65.6, 446.0], [65.7, 446.0], [65.8, 447.0], [65.9, 447.0], [66.0, 448.0], [66.1, 448.0], [66.2, 448.0], [66.3, 449.0], [66.4, 449.0], [66.5, 449.0], [66.6, 450.0], [66.7, 450.0], [66.8, 451.0], [66.9, 451.0], [67.0, 452.0], [67.1, 452.0], [67.2, 452.0], [67.3, 453.0], [67.4, 453.0], [67.5, 454.0], [67.6, 454.0], [67.7, 455.0], [67.8, 455.0], [67.9, 456.0], [68.0, 456.0], [68.1, 457.0], [68.2, 457.0], [68.3, 458.0], [68.4, 458.0], [68.5, 459.0], [68.6, 459.0], [68.7, 459.0], [68.8, 460.0], [68.9, 460.0], [69.0, 461.0], [69.1, 461.0], [69.2, 462.0], [69.3, 462.0], [69.4, 463.0], [69.5, 463.0], [69.6, 463.0], [69.7, 464.0], [69.8, 464.0], [69.9, 465.0], [70.0, 465.0], [70.1, 465.0], [70.2, 466.0], [70.3, 466.0], [70.4, 467.0], [70.5, 467.0], [70.6, 468.0], [70.7, 468.0], [70.8, 469.0], [70.9, 469.0], [71.0, 469.0], [71.1, 470.0], [71.2, 470.0], [71.3, 471.0], [71.4, 471.0], [71.5, 472.0], [71.6, 472.0], [71.7, 472.0], [71.8, 473.0], [71.9, 473.0], [72.0, 474.0], [72.1, 474.0], [72.2, 475.0], [72.3, 475.0], [72.4, 475.0], [72.5, 476.0], [72.6, 476.0], [72.7, 476.0], [72.8, 477.0], [72.9, 477.0], [73.0, 478.0], [73.1, 478.0], [73.2, 479.0], [73.3, 479.0], [73.4, 479.0], [73.5, 480.0], [73.6, 480.0], [73.7, 481.0], [73.8, 481.0], [73.9, 481.0], [74.0, 482.0], [74.1, 482.0], [74.2, 482.0], [74.3, 483.0], [74.4, 483.0], [74.5, 484.0], [74.6, 484.0], [74.7, 484.0], [74.8, 485.0], [74.9, 485.0], [75.0, 485.0], [75.1, 486.0], [75.2, 486.0], [75.3, 487.0], [75.4, 487.0], [75.5, 488.0], [75.6, 488.0], [75.7, 488.0], [75.8, 489.0], [75.9, 489.0], [76.0, 490.0], [76.1, 490.0], [76.2, 491.0], [76.3, 491.0], [76.4, 492.0], [76.5, 492.0], [76.6, 493.0], [76.7, 493.0], [76.8, 494.0], [76.9, 494.0], [77.0, 495.0], [77.1, 495.0], [77.2, 496.0], [77.3, 496.0], [77.4, 497.0], [77.5, 497.0], [77.6, 498.0], [77.7, 498.0], [77.8, 499.0], [77.9, 499.0], [78.0, 500.0], [78.1, 501.0], [78.2, 501.0], [78.3, 502.0], [78.4, 502.0], [78.5, 503.0], [78.6, 503.0], [78.7, 504.0], [78.8, 505.0], [78.9, 505.0], [79.0, 506.0], [79.1, 507.0], [79.2, 507.0], [79.3, 508.0], [79.4, 508.0], [79.5, 509.0], [79.6, 510.0], [79.7, 511.0], [79.8, 511.0], [79.9, 512.0], [80.0, 512.0], [80.1, 513.0], [80.2, 514.0], [80.3, 514.0], [80.4, 515.0], [80.5, 515.0], [80.6, 516.0], [80.7, 517.0], [80.8, 517.0], [80.9, 518.0], [81.0, 518.0], [81.1, 519.0], [81.2, 520.0], [81.3, 520.0], [81.4, 521.0], [81.5, 522.0], [81.6, 523.0], [81.7, 523.0], [81.8, 524.0], [81.9, 525.0], [82.0, 526.0], [82.1, 527.0], [82.2, 527.0], [82.3, 528.0], [82.4, 529.0], [82.5, 530.0], [82.6, 531.0], [82.7, 532.0], [82.8, 532.0], [82.9, 533.0], [83.0, 534.0], [83.1, 535.0], [83.2, 536.0], [83.3, 537.0], [83.4, 538.0], [83.5, 539.0], [83.6, 540.0], [83.7, 541.0], [83.8, 542.0], [83.9, 543.0], [84.0, 544.0], [84.1, 545.0], [84.2, 546.0], [84.3, 547.0], [84.4, 548.0], [84.5, 549.0], [84.6, 551.0], [84.7, 552.0], [84.8, 553.0], [84.9, 555.0], [85.0, 556.0], [85.1, 557.0], [85.2, 558.0], [85.3, 560.0], [85.4, 562.0], [85.5, 563.0], [85.6, 565.0], [85.7, 567.0], [85.8, 568.0], [85.9, 570.0], [86.0, 572.0], [86.1, 574.0], [86.2, 575.0], [86.3, 577.0], [86.4, 579.0], [86.5, 581.0], [86.6, 583.0], [86.7, 585.0], [86.8, 587.0], [86.9, 590.0], [87.0, 592.0], [87.1, 594.0], [87.2, 596.0], [87.3, 599.0], [87.4, 601.0], [87.5, 605.0], [87.6, 607.0], [87.7, 610.0], [87.8, 614.0], [87.9, 618.0], [88.0, 621.0], [88.1, 626.0], [88.2, 631.0], [88.3, 637.0], [88.4, 643.0], [88.5, 649.0], [88.6, 656.0], [88.7, 663.0], [88.8, 670.0], [88.9, 677.0], [89.0, 683.0], [89.1, 689.0], [89.2, 696.0], [89.3, 701.0], [89.4, 707.0], [89.5, 713.0], [89.6, 718.0], [89.7, 727.0], [89.8, 734.0], [89.9, 741.0], [90.0, 749.0], [90.1, 757.0], [90.2, 766.0], [90.3, 773.0], [90.4, 781.0], [90.5, 789.0], [90.6, 797.0], [90.7, 804.0], [90.8, 810.0], [90.9, 817.0], [91.0, 824.0], [91.1, 831.0], [91.2, 838.0], [91.3, 845.0], [91.4, 852.0], [91.5, 857.0], [91.6, 864.0], [91.7, 869.0], [91.8, 874.0], [91.9, 880.0], [92.0, 886.0], [92.1, 892.0], [92.2, 898.0], [92.3, 902.0], [92.4, 906.0], [92.5, 911.0], [92.6, 917.0], [92.7, 921.0], [92.8, 926.0], [92.9, 932.0], [93.0, 936.0], [93.1, 940.0], [93.2, 945.0], [93.3, 949.0], [93.4, 954.0], [93.5, 959.0], [93.6, 964.0], [93.7, 968.0], [93.8, 972.0], [93.9, 977.0], [94.0, 982.0], [94.1, 987.0], [94.2, 992.0], [94.3, 997.0], [94.4, 1002.0], [94.5, 1008.0], [94.6, 1013.0], [94.7, 1018.0], [94.8, 1024.0], [94.9, 1029.0], [95.0, 1034.0], [95.1, 1041.0], [95.2, 1046.0], [95.3, 1053.0], [95.4, 1059.0], [95.5, 1064.0], [95.6, 1071.0], [95.7, 1077.0], [95.8, 1085.0], [95.9, 1092.0], [96.0, 1100.0], [96.1, 1107.0], [96.2, 1113.0], [96.3, 1121.0], [96.4, 1129.0], [96.5, 1138.0], [96.6, 1146.0], [96.7, 1157.0], [96.8, 1165.0], [96.9, 1174.0], [97.0, 1183.0], [97.1, 1193.0], [97.2, 1202.0], [97.3, 1214.0], [97.4, 1225.0], [97.5, 1235.0], [97.6, 1249.0], [97.7, 1264.0], [97.8, 1279.0], [97.9, 1296.0], [98.0, 1316.0], [98.1, 1331.0], [98.2, 1353.0], [98.3, 1376.0], [98.4, 1397.0], [98.5, 1421.0], [98.6, 1450.0], [98.7, 1486.0], [98.8, 1529.0], [98.9, 1574.0], [99.0, 1634.0], [99.1, 1718.0], [99.2, 1815.0], [99.3, 1959.0], [99.4, 2106.0], [99.5, 2272.0], [99.6, 2469.0], [99.7, 2750.0], [99.8, 3090.0], [99.9, 3583.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 42475.0, "series": [{"data": [[0.0, 9538.0], [600.0, 2912.0], [700.0, 2062.0], [800.0, 2410.0], [900.0, 3164.0], [1000.0, 2460.0], [1100.0, 1762.0], [1200.0, 1135.0], [1300.0, 733.0], [1400.0, 484.0], [1500.0, 319.0], [1600.0, 195.0], [1700.0, 155.0], [1800.0, 116.0], [1900.0, 92.0], [2000.0, 112.0], [2100.0, 77.0], [2200.0, 107.0], [2300.0, 66.0], [2400.0, 86.0], [2500.0, 54.0], [2600.0, 33.0], [2800.0, 51.0], [2700.0, 72.0], [2900.0, 43.0], [3000.0, 25.0], [3100.0, 56.0], [3300.0, 24.0], [3200.0, 28.0], [3400.0, 29.0], [3500.0, 14.0], [3700.0, 14.0], [3600.0, 13.0], [3800.0, 20.0], [3900.0, 6.0], [4000.0, 3.0], [4100.0, 8.0], [4200.0, 3.0], [4300.0, 2.0], [4500.0, 4.0], [4400.0, 5.0], [4600.0, 4.0], [4700.0, 4.0], [4800.0, 1.0], [5100.0, 1.0], [5000.0, 4.0], [4900.0, 1.0], [5200.0, 2.0], [5300.0, 2.0], [5400.0, 5.0], [5600.0, 2.0], [5500.0, 2.0], [5800.0, 4.0], [5700.0, 2.0], [6100.0, 2.0], [6000.0, 3.0], [5900.0, 1.0], [6300.0, 4.0], [6200.0, 3.0], [6600.0, 2.0], [6400.0, 1.0], [6900.0, 1.0], [6800.0, 1.0], [6700.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [7600.0, 1.0], [7500.0, 1.0], [8000.0, 1.0], [8500.0, 2.0], [8600.0, 1.0], [8200.0, 1.0], [9400.0, 1.0], [9700.0, 1.0], [100.0, 16059.0], [200.0, 12340.0], [300.0, 36463.0], [400.0, 42475.0], [500.0, 14107.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1895.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 117110.0, "series": [{"data": [[0.0, 117110.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 30995.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 1895.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 190.24166269652216, "minX": 1.75354278E12, "maxY": 451.2965297675929, "series": [{"data": [[1.75354284E12, 451.2965297675929], [1.75354296E12, 228.87741141059016], [1.75354278E12, 190.24166269652216], [1.7535429E12, 410.0206020179834]], "isOverall": false, "label": "Out Tests", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75354296E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21.125, "minX": 1.0, "maxY": 847.5504587155965, "series": [{"data": [[2.0, 39.96551724137932], [3.0, 43.20000000000002], [4.0, 49.5], [5.0, 46.61538461538461], [6.0, 77.61111111111111], [7.0, 107.71874999999999], [8.0, 32.85294117647059], [9.0, 40.55102040816327], [10.0, 44.79661016949152], [11.0, 38.27142857142858], [12.0, 42.78688524590164], [13.0, 44.279069767441854], [14.0, 52.3170731707317], [15.0, 32.15094339622642], [16.0, 43.28378378378379], [17.0, 38.400000000000006], [18.0, 49.40972222222221], [19.0, 39.393442622950836], [20.0, 42.83333333333334], [21.0, 44.791666666666664], [22.0, 41.27027027027028], [23.0, 40.20618556701032], [24.0, 39.89473684210526], [25.0, 52.86486486486488], [26.0, 42.009803921568626], [27.0, 40.19277108433734], [28.0, 49.01063829787235], [29.0, 60.247933884297524], [30.0, 54.07894736842105], [31.0, 50.94117647058826], [32.0, 54.553398058252434], [33.0, 52.253521126760546], [34.0, 63.20833333333334], [35.0, 60.797752808988776], [36.0, 57.420560747663544], [37.0, 56.36764705882354], [38.0, 61.54807692307691], [39.0, 55.56338028169015], [40.0, 67.76136363636363], [41.0, 67.59803921568628], [42.0, 64.17204301075269], [43.0, 66.4466019417476], [44.0, 73.93835616438359], [45.0, 69.56043956043956], [46.0, 60.71844660194172], [47.0, 76.64705882352939], [48.0, 59.16304347826087], [49.0, 76.4271844660194], [50.0, 65.1509433962264], [51.0, 68.80898876404494], [52.0, 84.16083916083915], [53.0, 64.9323308270677], [54.0, 72.73333333333332], [55.0, 74.89215686274508], [56.0, 72.8111111111111], [57.0, 74.8409090909091], [58.0, 78.55813953488372], [59.0, 78.36470588235295], [60.0, 109.83495145631072], [61.0, 70.27173913043474], [62.0, 79.17647058823533], [63.0, 79.28571428571429], [64.0, 89.62179487179488], [65.0, 83.79545454545452], [66.0, 84.28571428571429], [67.0, 90.009900990099], [68.0, 93.21839080459769], [69.0, 82.08333333333331], [70.0, 97.14285714285717], [71.0, 87.73780487804878], [72.0, 94.93877551020407], [73.0, 105.02127659574468], [74.0, 91.97500000000001], [75.0, 58.470588235294116], [76.0, 102.0535714285714], [77.0, 129.6918918918918], [78.0, 98.30198019801983], [79.0, 97.09259259259261], [80.0, 113.64077669902906], [81.0, 97.7822580645161], [82.0, 94.12056737588647], [83.0, 109.60909090909091], [84.0, 100.7115384615385], [85.0, 111.48876404494385], [86.0, 101.79333333333332], [87.0, 99.35051546391755], [88.0, 123.04580152671763], [89.0, 104.27659574468088], [90.0, 112.4130434782609], [91.0, 98.1779141104295], [92.0, 134.1205673758866], [93.0, 112.99999999999999], [94.0, 109.45070422535215], [95.0, 113.48051948051948], [96.0, 126.15920398009948], [97.0, 136.84], [98.0, 99.69465648854957], [99.0, 110.89024390243904], [100.0, 125.54347826086953], [101.0, 106.8279569892473], [102.0, 117.74400000000003], [103.0, 171.13861386138618], [104.0, 125.41803278688518], [105.0, 115.44202898550724], [106.0, 152.04494382022472], [107.0, 127.9230769230769], [108.0, 128.29797979797985], [109.0, 93.08695652173914], [110.0, 150.18620689655177], [111.0, 128.20930232558143], [112.0, 185.03846153846155], [113.0, 137.59782608695653], [114.0, 147.68636363636352], [115.0, 132.91869918699183], [116.0, 145.86290322580643], [117.0, 143.651376146789], [118.0, 134.60402684563758], [119.0, 157.20909090909092], [120.0, 133.97902097902093], [121.0, 140.38016528925624], [122.0, 179.61458333333331], [123.0, 149.39361702127664], [124.0, 144.9999999999999], [125.0, 188.69565217391306], [126.0, 195.8934426229508], [127.0, 145.09183673469386], [128.0, 157.62612612612614], [129.0, 129.9298245614035], [130.0, 161.02777777777783], [131.0, 159.61904761904756], [132.0, 174.51351351351366], [133.0, 163.4852941176471], [134.0, 162.92907801418443], [135.0, 145.07608695652175], [136.0, 173.49166666666676], [137.0, 168.51485148514845], [138.0, 175.3529411764706], [139.0, 169.68309859154928], [140.0, 175.53086419753095], [141.0, 182.79847908745245], [142.0, 152.66390041493779], [143.0, 177.01351351351352], [144.0, 207.93023255813958], [145.0, 147.05714285714288], [146.0, 168.79166666666674], [147.0, 144.23437499999997], [148.0, 200.96610169491524], [149.0, 176.6578947368422], [150.0, 200.87804878048783], [151.0, 174.60526315789474], [152.0, 174.036231884058], [153.0, 169.57608695652172], [154.0, 172.1907514450866], [155.0, 189.55188679245276], [156.0, 180.35983263598328], [157.0, 196.61151079136704], [158.0, 174.50980392156865], [159.0, 210.64754098360643], [160.0, 178.97894736842102], [161.0, 179.5448275862069], [162.0, 180.6350710900473], [163.0, 258.8730158730159], [164.0, 237.18493150684932], [165.0, 199.3834586466165], [166.0, 192.89147286821705], [167.0, 181.86206896551715], [168.0, 190.70312500000006], [169.0, 171.16129032258058], [170.0, 165.0], [171.0, 226.1409395973155], [172.0, 202.8278145695366], [173.0, 255.2625698324023], [174.0, 210.48571428571435], [175.0, 207.06593406593402], [176.0, 182.33783783783792], [177.0, 232.48437499999997], [178.0, 238.40566037735854], [179.0, 228.658031088083], [180.0, 201.28735632183904], [181.0, 220.4263803680981], [182.0, 229.6800000000001], [183.0, 194.7473684210527], [184.0, 204.99300699300707], [185.0, 171.1351351351351], [186.0, 215.55339805825238], [187.0, 240.3623188405797], [188.0, 234.9813084112149], [189.0, 305.4659685863876], [190.0, 268.0403225806452], [191.0, 228.4055944055944], [192.0, 228.1288343558282], [193.0, 314.5159817351599], [194.0, 253.38888888888889], [195.0, 290.13043478260886], [196.0, 277.8743455497382], [197.0, 192.06962025316452], [198.0, 212.75939849624064], [199.0, 283.82432432432427], [200.0, 191.51898734177217], [201.0, 247.93209876543207], [202.0, 158.68595041322314], [203.0, 167.85135135135138], [204.0, 256.7062146892655], [205.0, 299.099173553719], [206.0, 216.80701754385956], [207.0, 225.2142857142857], [208.0, 216.05691056910567], [209.0, 320.5130434782609], [210.0, 234.67428571428567], [211.0, 273.93023255813966], [212.0, 254.1204188481676], [213.0, 268.79200000000003], [214.0, 251.98484848484853], [215.0, 254.06796116504856], [216.0, 277.81764705882347], [217.0, 280.40650406504085], [218.0, 212.99441340782124], [219.0, 265.9790209790211], [220.0, 245.05660377358487], [221.0, 272.3359375000001], [222.0, 242.46249999999995], [223.0, 269.2553956834536], [224.0, 295.0837696335078], [225.0, 288.9811320754717], [226.0, 316.83928571428584], [227.0, 253.27906976744183], [228.0, 212.34831460674155], [229.0, 260.83798882681555], [230.0, 261.7777777777777], [231.0, 245.02777777777789], [232.0, 234.9222222222223], [233.0, 252.5757575757576], [234.0, 237.80666666666667], [235.0, 271.41228070175447], [236.0, 265.7641509433962], [237.0, 276.8571428571427], [238.0, 254.34482758620692], [239.0, 304.87969924812023], [240.0, 334.3724137931035], [241.0, 284.8103448275863], [242.0, 343.6242424242427], [243.0, 298.68992248062006], [244.0, 310.5020746887967], [245.0, 290.6475409836065], [246.0, 272.536842105263], [247.0, 311.93203883495164], [248.0, 365.0954545454545], [249.0, 327.6837606837608], [250.0, 276.53211009174316], [251.0, 283.6446280991734], [252.0, 318.1608391608393], [253.0, 313.20645161290344], [254.0, 299.84799999999996], [255.0, 311.11931818181785], [257.0, 310.9625000000001], [256.0, 342.08421052631604], [258.0, 357.4858757062148], [259.0, 326.1302083333335], [260.0, 291.7901234567902], [261.0, 265.37837837837833], [262.0, 319.0196078431373], [263.0, 351.2796610169492], [264.0, 359.178217821782], [270.0, 347.28481012658204], [271.0, 314.5399999999999], [268.0, 363.6950819672132], [269.0, 322.231884057971], [265.0, 349.1798245614037], [266.0, 357.15730337078656], [267.0, 351.63402061855686], [273.0, 316.5294117647057], [272.0, 319.7428571428573], [274.0, 311.36585365853665], [275.0, 366.72093023255775], [276.0, 348.8531468531469], [277.0, 352.9300699300701], [278.0, 384.68965517241367], [279.0, 381.1517241379311], [280.0, 390.98954703832726], [286.0, 351.6228571428572], [287.0, 383.18749999999994], [284.0, 378.91056910569114], [285.0, 334.4379562043795], [281.0, 403.6464088397791], [282.0, 391.009009009009], [283.0, 319.69139966273167], [289.0, 355.9248120300752], [288.0, 385.20689655172424], [290.0, 363.7512195121952], [291.0, 374.99862448418156], [292.0, 362.4798534798536], [293.0, 373.9405940594059], [294.0, 390.73837209302326], [295.0, 381.19727891156464], [296.0, 422.9698795180724], [302.0, 340.60233918128654], [303.0, 334.9436619718307], [300.0, 442.9946524064174], [301.0, 342.5353535353534], [297.0, 457.17985611510795], [298.0, 458.8472222222221], [299.0, 455.5740740740742], [305.0, 371.7236842105263], [304.0, 384.90551181102336], [306.0, 348.08], [307.0, 393.9364161849713], [308.0, 382.4086956521739], [309.0, 412.6927374301677], [310.0, 410.0887096774193], [311.0, 446.947658402204], [312.0, 441.00330033003286], [318.0, 412.91214470284206], [319.0, 469.8758620689654], [316.0, 383.6411483253588], [317.0, 407.45840130505746], [313.0, 424.0814814814816], [314.0, 405.6351351351351], [315.0, 387.8487654320988], [321.0, 498.9363636363636], [320.0, 430.84269662921383], [322.0, 474.55882352941177], [323.0, 504.18713450292404], [324.0, 450.5059523809523], [325.0, 380.9567307692307], [326.0, 383.89545454545475], [327.0, 455.2678571428573], [328.0, 513.7119565217391], [334.0, 418.0000000000001], [335.0, 459.93835616438355], [332.0, 396.5963302752293], [333.0, 429.22507122507113], [329.0, 444.74285714285713], [330.0, 465.59999999999997], [331.0, 462.45454545454555], [337.0, 462.4155069582504], [336.0, 459.0879629629631], [338.0, 394.86224489795933], [339.0, 400.8055555555557], [340.0, 528.9506172839508], [341.0, 425.03124999999983], [342.0, 440.9069767441861], [343.0, 431.47747747747735], [344.0, 447.782383419689], [350.0, 479.89649122807026], [351.0, 519.9461883408071], [348.0, 418.72164948453593], [349.0, 436.32467532467535], [345.0, 437.49603174603163], [346.0, 446.42659279778377], [347.0, 473.37055837563497], [353.0, 411.97413793103453], [352.0, 522.0758293838862], [354.0, 419.73631840796025], [355.0, 423.3661971830987], [356.0, 479.88262910798113], [357.0, 482.1045751633988], [358.0, 456.00925925925935], [359.0, 483.7563025210082], [360.0, 452.3754940711459], [366.0, 455.6593886462884], [367.0, 432.7988826815642], [364.0, 491.12101910828045], [365.0, 436.8174603174602], [361.0, 481.3954175905391], [362.0, 465.10572687224663], [363.0, 431.56140350877223], [369.0, 511.7351598173516], [368.0, 401.03636363636366], [370.0, 375.86764705882376], [371.0, 480.929853181076], [372.0, 508.4691629955948], [373.0, 469.03767123287673], [374.0, 462.96918767507003], [375.0, 443.1633752244169], [376.0, 446.8059866962303], [382.0, 432.1458333333333], [383.0, 474.8037564766842], [380.0, 457.1848958333335], [381.0, 474.502590673575], [377.0, 439.05298013245033], [378.0, 564.6290322580646], [379.0, 443.59733333333315], [385.0, 462.67272727272706], [384.0, 429.25868725868696], [386.0, 508.4901610017901], [387.0, 505.85413290113416], [388.0, 478.3749999999999], [389.0, 489.75700934579424], [390.0, 523.0551948051946], [391.0, 514.3757700205335], [392.0, 480.5578059071729], [398.0, 571.922563417891], [399.0, 534.4042553191493], [396.0, 518.8908145580585], [397.0, 661.2833333333333], [393.0, 486.52272727272754], [394.0, 494.7422680412372], [395.0, 502.0803571428569], [401.0, 477.74999999999994], [400.0, 532.75786163522], [402.0, 523.7818652849746], [403.0, 527.9964243146624], [404.0, 593.9437299035367], [405.0, 486.31778929188255], [406.0, 512.0971659919029], [407.0, 482.15], [408.0, 536.6597560975615], [414.0, 483.11715481171547], [415.0, 536.1767381416512], [412.0, 582.4002433090028], [413.0, 457.9203187250994], [409.0, 495.61371841155216], [410.0, 528.8258178603], [411.0, 513.084142394822], [417.0, 548.330188679245], [416.0, 563.3809523809523], [418.0, 645.5168539325844], [419.0, 569.8053691275172], [420.0, 538.0545876887337], [421.0, 594.9749999999998], [422.0, 532.902727272727], [423.0, 519.1137724550902], [424.0, 548.3359375000006], [430.0, 535.8702670386602], [431.0, 569.8370927318292], [428.0, 570.1491071428561], [429.0, 535.5553869499241], [425.0, 572.8689516129039], [426.0, 619.5297805642635], [427.0, 572.5439613526573], [433.0, 587.4196035242292], [432.0, 609.5563380281687], [434.0, 562.468950749465], [435.0, 578.0254924681351], [436.0, 567.599999999999], [437.0, 536.4060975609761], [438.0, 510.85133887349986], [439.0, 494.2072368421052], [440.0, 555.6167012448132], [446.0, 575.51724137931], [447.0, 578.213063763608], [444.0, 517.7889273356393], [445.0, 518.9464285714276], [441.0, 571.2453233564949], [442.0, 481.290983606557], [443.0, 583.78962962963], [449.0, 535.5874649204859], [448.0, 586.2623828647917], [450.0, 571.6333333333338], [451.0, 673.6608187134507], [452.0, 847.5504587155965], [453.0, 664.3891891891896], [454.0, 586.1237113402071], [455.0, 574.7979861548145], [456.0, 560.1610660486684], [462.0, 559.479201331115], [463.0, 618.5872675250359], [460.0, 606.3404255319149], [461.0, 573.9778869778869], [457.0, 620.3076923076923], [458.0, 577.1696854146808], [459.0, 635.5261121856871], [465.0, 578.5878594249203], [464.0, 530.6805074971168], [466.0, 573.463897763579], [467.0, 567.3073286052005], [468.0, 577.4670138888888], [469.0, 611.054666146037], [470.0, 666.8403361344537], [471.0, 584.4916963226581], [472.0, 554.9197952218434], [476.0, 579.6367168528406], [473.0, 596.7730769230767], [474.0, 536.021428571429], [475.0, 589.4608582574768], [1.0, 21.125]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[347.2988266666676, 441.02589333332674]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 476.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 58472.0, "minX": 1.75354278E12, "maxY": 2.272192145E7, "series": [{"data": [[1.75354284E12, 2.259765575E7], [1.75354296E12, 1.0516772166666666E7], [1.75354278E12, 1.6104718516666668E7], [1.7535429E12, 2.272192145E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75354284E12, 125640.0], [1.75354296E12, 58472.0], [1.75354278E12, 89557.33333333333], [1.7535429E12, 126330.66666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75354296E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 239.96510242972795, "minX": 1.75354278E12, "maxY": 570.512342141568, "series": [{"data": [[1.75354284E12, 570.512342141568], [1.75354296E12, 297.6512062753682], [1.75354278E12, 239.96510242972795], [1.7535429E12, 521.1425887617703]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75354296E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 215.66573368270656, "minX": 1.75354278E12, "maxY": 523.4553114719304, "series": [{"data": [[1.75354284E12, 523.4553114719304], [1.75354296E12, 270.3457381310723], [1.75354278E12, 215.66573368270656], [1.7535429E12, 457.4859205471342]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75354296E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.8468318246784468, "minX": 1.75354278E12, "maxY": 9.130319431179029, "series": [{"data": [[1.75354284E12, 9.130319431179029], [1.75354296E12, 4.2226478770465645], [1.75354278E12, 3.8468318246784468], [1.7535429E12, 6.266770802549937]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75354296E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.75354278E12, "maxY": 9722.0, "series": [{"data": [[1.75354284E12, 9722.0], [1.75354296E12, 5888.0], [1.75354278E12, 3982.0], [1.7535429E12, 7398.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75354284E12, 797.0], [1.75354296E12, 415.0], [1.75354278E12, 532.0], [1.7535429E12, 791.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75354284E12, 2580.970000000005], [1.75354296E12, 1137.9800000000032], [1.75354278E12, 1244.9800000000032], [1.7535429E12, 1339.9700000000048]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75354284E12, 1268.0], [1.75354296E12, 472.0], [1.75354278E12, 800.9500000000007], [1.7535429E12, 1026.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75354284E12, 187.0], [1.75354296E12, 18.0], [1.75354278E12, 18.0], [1.7535429E12, 225.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75354284E12, 477.0], [1.75354296E12, 281.0], [1.75354278E12, 277.0], [1.7535429E12, 419.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75354296E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 21.5, "minX": 4.0, "maxY": 677.0, "series": [{"data": [[4.0, 21.5], [55.0, 40.0], [154.0, 52.0], [230.0, 30.0], [286.0, 61.0], [478.0, 35.0], [487.0, 61.0], [510.0, 659.0], [572.0, 606.0], [600.0, 41.0], [606.0, 435.5], [634.0, 48.0], [639.0, 677.0], [620.0, 419.0], [621.0, 67.0], [665.0, 59.0], [698.0, 332.5], [691.0, 419.0], [696.0, 412.0], [674.0, 482.0], [684.0, 599.5], [697.0, 354.0], [699.0, 474.0], [692.0, 448.0], [701.0, 80.0], [731.0, 495.0], [713.0, 386.0], [725.0, 355.0], [712.0, 554.0], [704.0, 494.0], [715.0, 426.0], [734.0, 458.0], [721.0, 101.0], [723.0, 419.0], [733.0, 291.0], [760.0, 405.0], [736.0, 380.0], [758.0, 76.0], [759.0, 424.0], [756.0, 442.0], [761.0, 401.0], [762.0, 357.0], [749.0, 378.0], [751.0, 590.0], [750.0, 447.0], [742.0, 442.0], [741.0, 382.0], [737.0, 368.0], [745.0, 481.0], [748.0, 316.0], [752.0, 412.0], [755.0, 393.0], [753.0, 395.0], [792.0, 372.0], [790.0, 400.0], [791.0, 451.0], [787.0, 400.0], [794.0, 421.0], [796.0, 421.0], [799.0, 307.0], [784.0, 419.0], [789.0, 353.0], [773.0, 265.0], [779.0, 289.0], [782.0, 414.0], [777.0, 449.0], [776.0, 433.0], [775.0, 340.0], [774.0, 545.0], [769.0, 345.0], [770.0, 381.0], [768.0, 414.0], [783.0, 476.0], [828.0, 334.0], [823.0, 311.0], [822.0, 515.0], [816.0, 348.5], [819.0, 376.0], [818.0, 483.0], [817.0, 524.0], [821.0, 465.0], [812.0, 318.5], [829.0, 184.0], [830.0, 403.0], [808.0, 188.5], [811.0, 520.0], [807.0, 243.0], [806.0, 395.0], [805.0, 436.0], [804.0, 531.0], [802.0, 364.0], [803.0, 386.0], [814.0, 497.0], [815.0, 481.0], [800.0, 438.0], [861.0, 170.0], [847.0, 357.0], [851.0, 310.0], [841.0, 369.0], [840.0, 416.0], [852.0, 213.0], [853.0, 462.0], [842.0, 197.0], [843.0, 472.0], [845.0, 343.0], [846.0, 342.0], [858.0, 228.0], [859.0, 486.0], [849.0, 332.0], [848.0, 441.0], [838.0, 387.0], [837.0, 429.0], [832.0, 484.0], [833.0, 398.0], [894.0, 429.0], [883.0, 144.0], [868.0, 189.0], [893.0, 463.0], [875.0, 440.0], [880.0, 440.0], [885.0, 326.0], [870.0, 398.0], [878.0, 178.0], [913.0, 424.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 913.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 21.0, "minX": 4.0, "maxY": 670.0, "series": [{"data": [[4.0, 21.0], [55.0, 30.0], [154.0, 38.0], [230.0, 29.0], [286.0, 44.0], [478.0, 34.0], [487.0, 52.0], [510.0, 641.0], [572.0, 584.5], [600.0, 39.5], [606.0, 417.0], [634.0, 45.0], [639.0, 670.0], [620.0, 394.5], [621.0, 59.0], [665.0, 57.0], [698.0, 326.0], [691.0, 411.0], [696.0, 403.0], [674.0, 474.0], [684.0, 589.0], [697.0, 343.0], [699.0, 455.0], [692.0, 430.0], [701.0, 70.0], [731.0, 486.0], [713.0, 379.0], [725.0, 347.0], [712.0, 534.0], [704.0, 476.0], [715.0, 415.0], [734.0, 441.0], [721.0, 95.0], [723.0, 410.0], [733.0, 276.0], [760.0, 393.0], [736.0, 369.0], [758.0, 71.5], [759.0, 412.0], [756.0, 433.0], [761.0, 390.0], [762.0, 344.0], [749.0, 369.0], [751.0, 578.0], [750.0, 433.0], [742.0, 434.0], [741.0, 367.0], [737.0, 356.5], [745.0, 474.0], [748.0, 297.0], [752.0, 401.0], [755.0, 380.0], [753.0, 382.0], [792.0, 364.5], [790.0, 385.0], [791.0, 439.0], [787.0, 380.5], [794.0, 410.5], [796.0, 407.0], [799.0, 296.0], [784.0, 403.0], [789.0, 337.5], [773.0, 258.0], [779.0, 283.0], [782.0, 401.0], [777.0, 436.0], [776.0, 419.0], [775.0, 330.0], [774.0, 536.0], [769.0, 334.0], [770.0, 363.5], [768.0, 397.0], [783.0, 466.0], [828.0, 317.0], [823.0, 300.0], [822.0, 503.0], [816.0, 323.0], [819.0, 353.0], [818.0, 475.0], [817.0, 512.0], [821.0, 456.0], [812.0, 302.5], [829.0, 176.0], [830.0, 392.0], [808.0, 178.0], [811.0, 511.0], [807.0, 234.0], [806.0, 383.0], [805.0, 424.0], [804.0, 520.0], [802.0, 354.0], [803.0, 374.0], [814.0, 486.5], [815.0, 469.0], [800.0, 425.0], [861.0, 165.0], [847.0, 347.0], [851.0, 301.0], [841.0, 358.0], [840.0, 402.0], [852.0, 206.5], [853.0, 456.0], [842.0, 191.0], [843.0, 463.0], [845.0, 329.0], [846.0, 330.0], [858.0, 221.5], [859.0, 475.0], [849.0, 321.0], [848.0, 428.0], [838.0, 376.0], [837.0, 417.0], [832.0, 468.0], [833.0, 385.5], [894.0, 421.0], [883.0, 139.0], [868.0, 184.5], [893.0, 449.0], [875.0, 430.0], [880.0, 427.0], [885.0, 312.0], [870.0, 386.0], [878.0, 170.0], [913.0, 407.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 913.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 359.65, "minX": 1.75354278E12, "maxY": 787.9666666666667, "series": [{"data": [[1.75354284E12, 786.65], [1.75354296E12, 359.65], [1.75354278E12, 565.7333333333333], [1.7535429E12, 787.9666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75354296E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 365.45, "minX": 1.75354278E12, "maxY": 789.5666666666667, "series": [{"data": [[1.75354284E12, 785.25], [1.75354296E12, 365.45], [1.75354278E12, 559.7333333333333], [1.7535429E12, 789.5666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75354296E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 365.45, "minX": 1.75354278E12, "maxY": 789.5666666666667, "series": [{"data": [[1.75354284E12, 785.25], [1.75354296E12, 365.45], [1.75354278E12, 559.7333333333333], [1.7535429E12, 789.5666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75354296E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 365.45, "minX": 1.75354278E12, "maxY": 789.5666666666667, "series": [{"data": [[1.75354284E12, 785.25], [1.75354296E12, 365.45], [1.75354278E12, 559.7333333333333], [1.7535429E12, 789.5666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75354296E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

